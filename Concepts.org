#+TITLE: Blockchain Concepts

* Distributed systems
** CAP Theorem
States that any distributed system cannot have *Consistency*, *Availability*
and *Partition tolerance* simultaneously.
*** Consistency:
- a property that ensures that all nodes in a distributed systems have a
single latest copy of data.
*** Availability:
- means that a system is up, accesible for use, and is accepting incoming
requests and responding with data without any failures and when required.
*** Partitin Tolerance:
- ensures that if a group of nodes fails the distributed system continues to
operate correctly.

** Byzantine Generals problem
*** Consensus:
- Process of agreement between distrusting nodes on a final state of data.
*** Distributed Consensus:
- The concept of achieving consensus between multiple/distributed nodes.
*** Requirements for consensus mechanisms:
**** Agreement:
- All honest nodes decide on the same value.
**** Termination:
- All honest nodes terminate execution of the consensus process and eventually
reach a decision.
**** Validity:
- The value agreed upon by all honest nodes must be the same as the initial
value proposed by at least one honest node.
**** Fault tolerant:
- The consensus algorithm should be able to run in the presence of faulty or
malicious nodes (Byzantine nodes).
**** Integrity:
- This is a requirement where by no node makes the decision more than once.
The nodes make decisions only once in a single consensus cycle.
** Types of consensus mechanism
*** Byzantine fault tolerant-based:
- Simple scheme of nodes that are publishing signed messages with no compute
intensive operations. Eventually, when a certain number of messages are received,
then an agreement is reached.
*** Leader-based consensus mechanisms:
- Require nodes to compete for the /leader-election lottery/ and the node that
wins it proposes a final value.

* History of Blockchain
** Eletronic Cash
*** Chaum, Fiat, and Naor (CEN)
- A e-cash scheme that introduced anonimity and double spending detection.
*** Hashcash
- Introduced by Adam Back in 1997 as a Proof of Work system to control email spam.
If legitimate users want to send e-mails then they are required to compute a hash
as a proof that they have spent a reasonable amount of computing resources before
sending the email.
- Takes considerable amount of computing resources to compute but is easy and
quick to verify.
*** B-money
- Introduced in 1998 by Wei Dai. Proposed the idea of create money solving
*computational puzzles* such as *hashcash*. Based on a peer-to-peer network where
each node contain its own list of transactions.
*** BitGold
- Introduced in 2005 and also proposed solving *computational puzzles* to mint
digital currency.
*** Bitcoin
- The first practical implementation of implementation of a cryptocurrency. For
the very first time it solved the problem of *distributed consensus* in a
*trustless* network.
- It uses public key cryptography with hashcash as PoW to provide a secure,
controlled, and decentralized method of minting digital currency. The key
innovation is the idea of an ordered list of blocks composed of transactions
and cryptographically secured by the PoW mechanism 

* Introduction to Blockchain
** Blockchain definitions
- At its core is a peer-to-peer distributed ledger that is cryptographically
secure, append-only, immutable (extremely hard to change), and updateable only
via consensus or agreement among peers.
- Can be thought of as a layer of a distributed peer-to-peer network running on
top of the Internet, as can be seen below in the diagram.
It is analogous to SMTP, HTTP, or FTP running on top of TCP/IP. 
- a platform whereby peers can exchange values using transactions without the
need for a central trusted arbitrator. This is a powerful concept and once readers
understand it they will realize the tsunamic potential of blockchain technology.
This allows blockchain to be a decentralized consensus mechanism where no single
authority is in charge of the database.
- Is a decentralized consensus mechanism. In a blockchain, all peers eventually
come to an agreement regarding the state of a transaction.
- Is a distributed shared ledger. Blockchain can be considered a shared ledger
of transactions. The transaction are ordered and grouped into blocks. Currently,
the real-world model is based on private databases that each organization
maintains whereas the distributed ledger can serve as a single source of truth
for all member organizations that are using the blockchain
- Is a data structure; it is basically a linked list that uses hash pointers
instead of normal pointers. Hash pointers are used to point to the previous block.
*** Block definitions
- a selection of transactions bundled together in order to organize them logically
It is made up of transactions and its size is variable depending on the type and
design of the blockchain in use. A reference to a previous block is also included
in the block unless it's a genesis block. A genesis block is the first block in
the blockchain that was hardcoded at the time the blockchain was started. The
structure of a block is also dependent on the type and design of a blockchain,
but generally there are a few attributes that are essential to the functionality
of a block, such as the block header, pointers to previous blocks, the time stamp,
nonce, transaction counter, transactions, and other attributes

|---------------------|
| Previous block hash |
|---------------------|
| Nonce               |
|---------------------|
| Transactions        |
|---------------------|
** Generic Elements of Blockchain
*** Addresses
- Are unique identifiers that are used in a transaction on the
blockchain to denote senders and recipients. An address is usually a public key
or derived from a public key.
*** Transaction
- Is the fundamental unit of a blockchain. A transaction represents a transfer of
value from one address to another.
*** Block
-  Is composed of multiple transactions and some other elements such as the
previous block hash (hash pointer), timestamp, and nonce.
*** Peer-to-peer network
- As the name implies, this is a network topology whereby all peers can
communicate with each other and send and receive messages.
*** Scripting or programming language
- This element performs various operations on a transaction. Transaction scripts
are predefined sets of commands for nodes to transfer tokens from one address to
another and perform various other functions. Turing complete programming language
is a desirable feature of blockchains; however, the security of such languages is
a key question and an area of important and ongoing research.
*** Virtual machine
- An extension of a transaction script. A virtual machine allows Turing complete
code to be run on a blockchain (as smart contracts) whereas a transaction script
can be limited in its operation.
Examples: Ethereum Virtual Machine (EVM) and Chain Virtual Machine (CVM).
*** State machine
- A blockchain can be viewed as a state transition mechanism whereby a state is
modified from its initial form to the next and eventually to a final form as a
result of a transaction execution and validation process by nodes.
*** Nodes
- Performs various functions depending on the role it takes. A node can propose
and validate transactions and perform mining to facilitate consensus and secure
the blockchain - consensus protocol.
*** Smart contracts
- Run on top of the blockchain and encapsulate the business logic to be executed
when certain conditions are met.
** Features of Blockchain
*** Distributed consensus
- Is a major underpining of Blockchain. This enables Blockchain to present a 
single version of truth that is agreed upon by all parties without the
requirement of a centra authority.
*** Transaction verification
- Any transations posted from nodes on the blockchain are verified based on a
predetermined set of rules and only valid transactions are selected for inclusion
in a block.
*** Platform of smart contracts
- Is where programs can run that execute business logic on behalf of the users.
*** Transfering value between peers
- Enables the transfer of value between its users via tokens, which can be
thought as carrier of value.
*** Generating cryptocurrency
- A Blockchain can generate cryptocurrency as an incentive to its miners who 
validate the transactions and spend resources in order to secure the blockchain.
*** Smart property
- Possibility of link a digital physical asset to the blockchain in an irrevocable
manner, such that it cannot be claimed by anyone else.
*** Provider of security
- Blockchain is based on proven cryptographic  technology that ensures the
integrity and availability of data.
*** Immutability
- Records once added onto blockchain are immutable.
*** Uniqueness
- Ensures that every transaction is unique and has not been spent already.
*** Smart contracts
- Automated autonomous programs that reside on blockchain and encapsulate
business logic and code in order to execute a required function when certain
conditions are met.
** Applications of Blockchain
*** How Blockchain accumulate blocks
1. A node starts a transaction by signing it with its private key.
2. The transaction is propagated (flooded) by using much desired Gossip protocol
to peers, which validates the transaction based on pre-set criteria. Usually,
more than one node is required to validate the transactions.
3. Once the transaction is validated, it is included in a block, which is then
propagated on to the network. At this point, the transaction is considered
confirmed.
4. The newly created block now becomes part of the ledger and the next block
links itself cryptographically back to this block. This link is a hash pointer.
At this stage, the transaction gets its second confirmation and the block gets
its first.
5. Transactions are then reconfirmed every time a new block is created. Usually,
six confirmations in the bitcoin network are required to consider the transaction
final.
** Tiers of Blockchain Technology
*** Blockchain 1.0
- Intruduced with bitcoin and basically for cryptocurrencies.
*** Blockchain 2.0
- Used for financial services and contracts. Derivatives, swaps and bonds.
Applications beyond currency, finance and markets are included at this tier.
*** Blockchain 3.0
- Implement applications that are beyond the financial services industry and are
mmore general purpose industries such as government, health, media, arts and
justice.
*** Generation X (Blockchain X)
- Future of blockchain. Provide services in all realms of society.
Public open distributed ledger with general-purpose rational agents (Machina
Economicus) running on Blockchain, making decisions and interacting with other
intelligent autonomous agents on behalf of humans and regulated by code instead
of law or paper contracts.
** Types of Blockchain
*** Public Blockchains
- Open to the public and anyone can participate as a node in decision-making
process. Users may or may not be rewarded for their participation.
Also known as permission-less ledgers.
*** Private Blockchains
- Private and open only to a consortium or group of individuals or organizations
that has decided to share the ledger among themselves.
*** Semi-private Blockchains
- Part is private, part is public. Private part is controlled by a group of
individuals whereas public one is open.
*** Sidechains
- Or pegged sidechains. Concept whereby coins can be moved from one blockchain
to another and moved back.
*** Permissioned ledger
- Is a Blockchain whereby the participants of the network are known and already
trusted. Don't need to use the consensus mechanism, instead an agreement protocol
can be used to maintain a shared version of the truth about the state of the
records. It don't need to be private but public with regulated access control.
*** Distributed ledger
- Is distributed among its participants and spread across multiple sites or
organizations. Can be either private or public. The records are stored
contiguously instead of sorted into blocks. Used in Ripple.
*** Shared ledger
- Generic term used to describe any database or application that is shared
by the public or a consortium.
*** Fully private and proprietary Blockchains
*** Tokenized Blockchains
*** Tokenless Blockchains
*** Consensus in Blockchain
**** Proof of Work
**** Proof of Stake
**** Delegated Proof of Stake
**** Proof of Elapsed Time
**** Deposit-based consensus
**** Proof of importance
**** Federated consensus of federated Byzantine consensus
**** Reputation-based mechanisms
**** Pratical Byzantine Fault Tolerance


